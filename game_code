import sys
import pygame as pg
from pygame.locals import *


# Defining the Player
class Player:
    def __init__(self, x, y, width, height, screen):
        self.image = pg.image.load("mario_image.png")
        self.scaled_image = pg.transform.scale(self.image, (width, height))
        self.rect = self.scaled_image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.width = width
        self.height = height
        self.prev_rect = self.rect.copy()
        self.screen = screen
        self.starting_x = 1
        self.starting_y = 800//1.2  # screen_height = 800
        self.draw()

    def draw(self):
        self.screen.fill((0, 0, 0), self.prev_rect)
        self.prev_rect = self.rect.copy()
        self.screen.blit(self.scaled_image, self.rect)


# Defining the obstacles
class Obstacle:
    def __init__(self, x, y, width, height, screen):
        self.rect = pg.Rect(x, y, width, height)
        self.width = width
        self.height = height
        self.screen = screen
        self.x = x
        self.y = y
        self.draw()

    def draw(self):
        pg.draw.rect(self.screen, (255, 0, 0), self.rect, 20)

# Defining the coins
class Coin:
    def __init__(self, center_x, center_y, radius, screen):
        # circle_surface = pg.Surface((100, 100))
        self.circle = pg.draw.circle(
            screen, (255, 0, 0), (center_x, center_y), radius)
        self.screen = screen
        self.x = center_x
        self.y = center_y
        self.radius = radius
        self.draw()

    def draw(self):
        pg.draw.circle(self.screen, (255, 255, 0), (self.x, self.y), 20)


def run_game():
    game_over = False
    player_won = False

    # Game window function
    pg.init()
    screen_width = 1200
    screen_height = 800
    screen = pg.display.set_mode((screen_width, screen_height))
    pg.display.set_caption("Collect Coins Game")

    # Initial values
    starting_x = 1
    starting_y = screen_height//1.2
    player_vx = 0
    player_vy = 0
    coins_collected = 0
    collected_coins = []
    player_lives = 3

    # Legend
    legend_rect = pg.Rect(10, 40, 100, 60)
    font = pg.font.Font(None, 30)
    lives_text = font.render(
        "Lives: " + str(player_lives), True, (255, 255, 255))
    coins_text = font.render(
        "Coins: " + str(coins_collected), True, (255, 255, 255))
    screen.blit(lives_text, (10, 10))
    screen.blit(coins_text, (10, 40))

    # Movable player
    player = Player(starting_x, starting_y, 100, 100, screen)

    # Unmovable obstacles
    obstacle1 = Obstacle(150, 650, 200, 20, screen)
    obstacle2 = Obstacle(350, 550, 200, 20, screen)
    obstacle3 = Obstacle(550, 450, 200, 20, screen)
    obstacle4 = Obstacle(750, 350, 200, 20, screen)
    obstacle5 = Obstacle(950, 250, 200, 20, screen)
    obstacles = [obstacle1, obstacle2, obstacle3, obstacle4, obstacle5]

    # Unmovable coins
    radius = 20
    coin1 = Coin(250, 570, radius, screen)
    coin2 = Coin(450, 470, radius, screen)
    coin3 = Coin(650, 370, radius, screen)
    coin4 = Coin(850, 270, radius, screen)
    coin5 = Coin(1050, 170, radius, screen)
    coins = [coin1, coin2, coin3, coin4, coin5]

    while True:
        for event in pg.event.get():
            if event.type == KEYDOWN:
                if not game_over and not player_won:
                    if event.key == K_LEFT:
                        player_vx = -1
                    elif event.key == K_RIGHT:
                        player_vx = 1
                    elif event.key == K_UP:
                        player_vy = -2
                    elif event.key == K_DOWN:
                        player_vy = 1
            elif event.type == KEYUP:
                if not game_over and not player_won:
                    if event.key == K_LEFT or event.key == K_RIGHT:
                        player_vx = 0
                    elif event.key == K_UP or event.key == K_DOWN:
                        player_vy = 0
            elif event.type == QUIT:
                sys.exit()

        if not game_over and not player_won:
            player.rect.x += player_vx
            player.rect.y += player_vy
            player.draw()
        pg.display.update()
        
        # To avoid moving plyer outside the window frames
        if player.rect.left < 0:
            player.rect.left = 0
        if player.rect.right > screen_width:
            player.rect.right = screen_width
        if player.rect.top < 0:
            player.rect.top = 0
        if player.rect.bottom > screen_height:
            player.rect.bottom = screen_height
        player.draw()
        
        # To avoid moving player on the legend area
        if player.rect.colliderect(legend_rect):
            if player.rect.right > legend_rect.left:
                player.rect.right = legend_rect.left
            if player.rect.left < legend_rect.right:
                player.rect.left = legend_rect.right
            if player.rect.bottom > legend_rect.top:
                player.rect.bottom = legend_rect.top
            if player.rect.top < legend_rect.bottom:
                player.rect.top = legend_rect.bottom
        player.draw()

        # Player cannot touch the obstacles - if it happenes, player lose one live and go back to the starting position
        for obstacle in obstacles:
            if player.rect.x + player.width + 0.1 > obstacle.x and player.rect.x < obstacle.x + obstacle.width and player.rect.y + player.height + 0.1 > obstacle.y and player.rect.y < obstacle.y + obstacle.height:
                player_lives -= 1
                player.rect.x = starting_x
                player.rect.y = starting_y
                screen.fill((0, 0, 0), (10, 10, 100, 20))
                lives_text = font.render(
                    "Lives: " + str(player_lives), True, (255, 255, 255))
                screen.blit(lives_text, (10, 10))
                pg.display.update()
                if player_lives == 0:
                    game_over = True
                    font = pg.font.Font(None, 100)
                    game_over_text = font.render(
                        "Game Over", True, (0, 255, 255))
                    screen.blit(game_over_text,
                                (screen_width//3, screen_height//2))
                    pg.display.update()

        # Player collect coins - if 5 coins collected, game won
        for coin in coins:
            if player.rect.collidepoint(coin.circle.center):
                if coin not in collected_coins:
                    collected_coins.append(coin)
                    coins_collected += 1
                    coins.remove(coin)
                    screen.fill((0, 0, 0), (10, 40, 100, 60))
                    coins_text = font.render(
                        "Coins: " + str(coins_collected), True, (255, 255, 255))
                    screen.blit(coins_text, (10, 40))
                    pg.display.update()
                if coins_collected == 5:
                    player_won = True
                    won_font = pg.font.Font(None, 100)
                    player_won_text = won_font.render(
                        "YOU WON!", True, (0, 255, 255))
                    screen.blit(player_won_text,
                                (screen_width//3, screen_height//2))
                    pg.display.update()

        pg.display.update()

run_game()
